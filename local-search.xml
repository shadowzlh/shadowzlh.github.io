<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>OAuth2.0</title>
    <link href="/2023/08/26/OAuth2-0/"/>
    <url>/2023/08/26/OAuth2-0/</url>
    
    <content type="html"><![CDATA[<h2 id="OAuth2-0"><a href="#OAuth2-0" class="headerlink" title="OAuth2.0"></a>OAuth2.0</h2><h3 id="1-OAuth2-是什么"><a href="#1-OAuth2-是什么" class="headerlink" title="1. OAuth2 是什么"></a>1. OAuth2 是什么</h3><blockquote><p>含义</p></blockquote><p><code>OAuth2.0</code>是<code>OAuth</code>协议的延续版本，但不向前兼容<code>OAuth 1.0</code>(即完全废止了<code>OAuth1.0</code>)。 <code>OAuth 2.0</code>关注客户端开发者的简易性。要么通过组织在资源拥有者和HTTP服务商之间的被批准的交互动作代表用户，要么允许第三方应用代表用户获得访问的权限。同时为Web应用，桌面应用和手机，和起居室设备提供专门的认证流程</p><h3 id="2-OAuth2-的四种角色"><a href="#2-OAuth2-的四种角色" class="headerlink" title="2. OAuth2 的四种角色"></a>2. OAuth2 的四种角色</h3><ol><li>资源所有者(Resource Owner) : 即用户本身</li><li>资源服务器(Resource Server) : 存储受保护的账号信息</li><li>授权服务器(Authorization Server) : 在成功验证用户身份, 并获得授权后, 给客户端派发访问令牌</li><li>客户端(Client) : 即代表你访问的第三方应用</li></ol><h3 id="3-OAuth2-的四种模式"><a href="#3-OAuth2-的四种模式" class="headerlink" title="3.OAuth2 的四种模式"></a>3.OAuth2 的四种模式</h3><blockquote><p>授权码模式 : 最常用的模式, 最繁琐的模式, 也是最安全的模式</p></blockquote><p><img src="https://images.shadowzlh.top/2023/08/ae7bd889b2bb393719f3f29294b85def.png" alt="image-20230826212742387"></p><p><strong>流程: 也可以把访问照片理解成为，登录第三方应用</strong></p><ul><li>1.2.3：用户通过浏览器访问第三方应用(client)的一张照片，但浏览器没有权限</li><li>4：通过请求重定向至授权页面，等待用户授权</li><li>5.6：用户授权完成，授权服务器返回一个 code 和 client_id 给浏览器</li><li>7.8.9:浏览器拿着code去请求client，client拿着code去和授权服务器换取<a href="https://so.csdn.net/so/search?q=Access_token&spm=1001.2101.3001.7020">Access_token</a>和 Refresh_token  </li><li>10.11: client拿着Access_token去和资源服务器换取照片信息,资源服务器验证access_Token的合法性，没问题就允许访问可控资源，返回照片列表给client</li><li>12.13: client拿到照片列表给到浏览器，浏览器返回视图给用户看</li></ul><blockquote><p>简化模式</p></blockquote><p>简化模式相比于授权码模式，少了code换取token这一步，但不安全，token可以被恶意脚本获取，同时token有效期短，浏览器关闭即失效。</p><p><img src="https://images.shadowzlh.top/2023/08/2b8a9aecaf8c2bb77fb46f1c8a71750c.png" alt="image-20230826212819435"></p><blockquote><p>密码模式 </p></blockquote><p>密码模式是用户直接将自己的用户名密码交给client（App），client用用户的用户名密码直接换取AccessToken。</p><blockquote><p>客户端模式</p></blockquote><p>只要client请求，我们就将AccessToken发送给它。</p><p>转载: <a href="https://blog.csdn.net/Huang_Ds/article/details/125533523">【OAuth2】详细讲解_Huang_Ds的博客-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OAUth</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
